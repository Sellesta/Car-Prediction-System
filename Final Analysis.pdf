---
title: "R Notebook"
output: html_notebook
---

```{r}
library(tidyverse)  # for data manipulation and visualization
library(modelr)     # for easy model fitting
library(broom)      # for tidying model outputs
```

```{r}
# Convert 'price_in_euro' to numeric if needed
car_data$price_in_euro <- as.numeric(gsub(",", "", car_data$price_in_euro))
```

```{r}
# Preview the unique values that might not be numeric
unique(car_data$price_in_euro)
```

```{r}
# Remove commas, euro symbols, and spaces
car_data$price_in_euro <- gsub(",", "", car_data$price_in_euro)
car_data$price_in_euro <- gsub("???", "", car_data$price_in_euro)
car_data$price_in_euro <- gsub(" ", "", car_data$price_in_euro)
```

```{r}
# Convert to numeric
car_data$price_in_euro <- as.numeric(car_data$price_in_euro)
```
```{r}
# Check for NA values which indicate conversion issues
sum(is.na(car_data$price_in_euro))
```

```{r}
mean_price <- mean(car_data$price_in_euro, na.rm = TRUE)
car_data$price_in_euro[is.na(car_data$price_in_euro)] <- mean_price
```

```{r}
car_data <- na.omit(car_data)
```

```{r}
library(ggplot2)
```

```{r}
# Histogram of price_in_euro
ggplot(car_data, aes(x = price_in_euro)) +
  geom_histogram(bins = 30, fill = "blue", color = "black") +
  labs(title = "Histogram of Car Prices", x = "Price in Euro", y = "Frequency") +
  theme_minimal()
```



```{r}
# Boxplot of price_in_euro
ggplot(car_data, aes(y = price_in_euro)) +
  geom_boxplot(fill = "cyan", color = "black") +
  labs(title = "Boxplot of Car Prices", y = "Price in Euro") +
  theme_minimal()
```


```{r}
# Boxplot of price_in_euro
ggplot(car_data, aes(y = price_in_euro)) +
  geom_boxplot(fill = "cyan", color = "black") +
  labs(title = "Boxplot of Car Prices", y = "Price in Euro") +
  theme_minimal()
```


```{r}
# Summary statistics for numeric variables
summary(select(car_data, -contains("_")))
```


```{r}
# QQ plot of price_in_euro
qqnorm(car_data$price_in_euro)
qqline(car_data$price_in_euro, col = "red", lwd = 2)

```



```{r}
# QQ plot of price_in_euro
qqnorm(car_data$price_in_euro)
qqline(car_data$price_in_euro, col = "red", lwd = 2)

```


```{r}
library(GGally)
ggpairs(numerical_data, cardinality_threshold = 500)
```

```{r}
# Re-load or re-examine the original data (if possible, show the structure or a snapshot)
str(numerical_data)
head(numerical_data)

```

```{r}
# Check if 'fuel_consumption_l_100km' was accidentally converted incorrectly
unique(numerical_data$fuel_consumption_l_100km)
```
```{r}
# Re-apply conversion logic cautiously
numerical_data$fuel_consumption_l_100km <- as.numeric(as.character(numerical_data$fuel_consumption_l_100km))
numerical_data$fuel_consumption_l_100km[numerical_data$fuel_consumption_l_100km == 2006] <- NA
```


```{r}
# Safely convert other columns to numeric if they are still not
numerical_data$power_kw <- as.numeric(as.character(numerical_data$power_kw))
numerical_data$mileage_in_km <- as.numeric(as.character(numerical_data$mileage_in_km))
numerical_data$year <- as.numeric(as.character(numerical_data$year))
```

```{r}
# Check again for NAs
sum(is.na(numerical_data$power_kw))
sum(is.na(numerical_data$mileage_in_km))
sum(is.na(numerical_data$year))
sum(is.na(numerical_data$fuel_consumption_l_100km))
```

```{r}
# Review the summary to ensure data integrity
summary(numerical_data)
```


```{r}
# Apply NA removal only after ensuring the data is properly converted
numerical_data <- na.omit(numerical_data)
summary(numerical_data)

```

```{r}
# Using base R's pairs function for simplicity and to avoid further complications
if(nrow(numerical_data) > 0) {
  pairs(~ power_kw + mileage_in_km + year + fuel_consumption_l_100km, data = numerical_data, main = "Scatterplot Matrix")
} else {
  cat("No data available to plot.")
}
```

```{r}
# Analyze impact of a categorical variable 'transmission_type' on 'price_in_euro'
ggplot(car_data, aes(x = transmission_type, y = price_in_euro)) +
  geom_boxplot() +
  labs(title = "Impact of Transmission Type on Car Prices", x = "Transmission Type", y = "Price in Euro")
```

```{r}
names(numerical_data)
```

```{r}
names(car_data)
```

```{r}
# Assuming numerical_data is created by selecting specific columns from car_data
numerical_data <- car_data[, c("power_kw", "mileage_in_km", "year", "fuel_consumption_l_100km", "price_in_euro")]
```

```{r}
# Verify the structure
summary(numerical_data)
```

```{r}
# Assuming 'Unnamed..0' can serve as a unique identifier and exists in both datasets
if("Unnamed..0" %in% names(car_data) && "Unnamed..0" %in% names(numerical_data)) {
  numerical_data <- merge(numerical_data, car_data[, c("Unnamed..0", "price_in_euro")], by = "Unnamed..0")
} else {
  cat("No appropriate key found for merging. Ensure both data sets include a common unique identifier.\n")
}
```


```{r}
# Verify the addition
summary(numerical_data$price_in_euro)
```


```{r}
# Manual alignment example
numerical_data <- car_data[, c("power_kw", "mileage_in_km", "year", "fuel_consumption_l_100km")]
numerical_data$price_in_euro <- car_data$price_in_euro
```


```{r}
ggplot(numerical_data, aes(x = power_kw, y = price_in_euro)) +
  geom_point() +
  geom_smooth(method = "lm", color = "red") +
  labs(title = "Relationship Between Power KW and Price in Euro", x = "Power KW", y = "Price in Euro")
```


```{r}
# Ensure all variables are numeric before calculating correlations
car_data$price_in_euro <- as.numeric(as.character(car_data$price_in_euro))
car_data$power_kw <- as.numeric(as.character(car_data$power_kw))
car_data$mileage_in_km <- as.numeric(as.character(car_data$mileage_in_km))
car_data$year <- as.numeric(as.character(car_data$year))  # Typically, 'year' should already be numeric, but just to be sure
```

```{r}
# Check the structure to confirm changes
str(car_data[c("price_in_euro", "power_kw", "mileage_in_km", "year")])
```

```{r}
# Calculate the correlation matrix
correlations <- cor(car_data[, c("price_in_euro", "power_kw", "mileage_in_km", "year")], use = "complete.obs")
```


```{r}
library(corrplot)
```


```{r}
# Plot the correlation matrix
corrplot(correlations, method = "circle")
```

```{r}
# Visualizing relationships and distributions
library(ggplot2)
ggplot(car_data, aes(x = mileage_in_km, y = price_in_euro)) + 
    geom_point() + 
    geom_smooth(method = "lm", col = "blue") + 
    labs(title = "Price vs. Mileage", x = "Mileage in km", y = "Price in Euro")

# Boxplot to see price distribution by car brand
ggplot(car_data, aes(x = brand, y = price_in_euro)) + 
    geom_boxplot() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(title = "Price Distribution by Brand", x = "Brand", y = "Price in Euro")
```


```{r}
library(stats)

```

```{r}
# Fit the linear regression model
model <- lm(price_in_euro ~ ., data = regression_data)
```

```{r}
# Fit the linear regression model
model <- lm(price_in_euro ~ ., data = regression_data)
```

```{r}
model <- lm(price_in_euro ~ power_kw + mileage_in_km + year + as.factor(brand) + as.factor(transmission_type), data = car_data)

```

```{r}
# Check for aliasing in the summary
summary(model)
```

```{r}
library(car)  # Ensure the library is loaded
vif_values <- vif(model)  # This should work now without error
print(vif_values)
```


```{r}
# Continue with any further analysis, e.g., fitting a regression model
model <- lm(price_in_euro ~ ., data = car_data_transformed)
summary(model)
```


vif_values <- vif(model)  # This should work now without error
print(vif_values)
```

```{r}
# model is stored in a variable called 'model'
summary_output <- summary(model)
print(summary_output)
```






